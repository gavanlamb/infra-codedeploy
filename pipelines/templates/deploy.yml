parameters:
  - name: applicationName
    displayName: Name of the codedeploy application
    type: string
  - name: buildNumber
    displayName: Build number
    type: string
  - name: codeDeployBucket
    displayName: Name of codedeploy bucket
    type: string
  - name: environment
    displayName: Name of environment
    type: string
  - name: serviceName
    displayName: Name of service
    type: string
  - name: workingDirectory
    displayName: Directory where the files are located
    type: string
    default: $(Pipeline.Workspace)

steps:
  - task: PowerShell@2
    displayName: Push AppSpec file
    inputs:
      targetType: inline
      script: |
        aws s3 cp deploy.yaml s3://${{ parameters.codeDeployBucket }}/${{ parameters.serviceName }}/${{ parameters.buildNumber }}/${{ parameters.environment }}/codedeploy/deploy.yaml
      errorActionPreference: default
      showWarnings: true
      pwsh: true
      workingDirectory: ${{ parameters.workingDirectory }}

  - task: PowerShell@2
    displayName: Deploy
    name: deploy
    inputs:
      targetType: inline
      script: |
        $deploymentId = aws deploy create-deployment --application-name ${{ parameters.applicationName }} --deployment-group-name ${{ parameters.deploymentGroupName }} --s3-location bucket=${{ parameters.codeDeployBucket }},key=${{ parameters.serviceName }}/${{ parameters.buildNumber }}/${{ parameters.environment }}/codedeploy/deploy.yaml,bundleType=YAML  --output json --query 'deploymentId' | ConvertFrom-Json
        Write-Host "##vso[task.setvariable variable=DEPLOYMENT_ID;isOutput=true]$deploymentId"
        Write-Host "##vso[task.setvariable variable=DEPLOYMENT_STATUS;isOutput=true]STARTED"
        Write-Host "Waiting for deployment:$deploymentId to finish"
        aws deploy wait deployment-successful --deployment-id $deploymentId
        Write-Host "##vso[task.setvariable variable=DEPLOYMENT_STATUS;isOutput=true]COMPLETED"
      errorActionPreference: default
      showWarnings: true
      pwsh: true
      workingDirectory: ${{ parameters.workingDirectory }}

  - task: PowerShell@2
    displayName: Stop deploy
    condition: or(and(canceled(), eq(variables['deploy.DEPLOYMENT_STATUS'], 'STARTED')), and(failed(), eq(variables['deploy.DEPLOYMENT_STATUS'], 'STARTED')))
    inputs:
      targetType: inline
      script: |
        Write-Host "$(deploy.DEPLOYMENT_ID)"
        aws deploy stop-deployment --deployment-id $(deploy.DEPLOYMENT_ID)
      errorActionPreference: default
      showWarnings: true
      pwsh: true
      workingDirectory: ${{ parameters.workingDirectory }}